#!/bin/bash
#
# This script automates the installation outlined on:
# https://archlinuxarm.org/platforms/armv6/raspberry-pi
#
# Arch Linux dependencies:
#   - wpa_supplicant (for wpa_passphrase)
#   - dosfstools     (for mkfs.vfat)
#


# Check for the install flag.
if [ "$1" != "--install" ]; then
  echo "Usage: $0 --install"
  echo
  echo "Arch install script for Raspberry Pi 1 Model A."
  echo "It preconfigures the Pi for easy headless setup over Wi-Fi."
  echo
  echo "This script assumes a network with WPA encryption."
  echo "The hash requires a key with 8-63 characters."
  echo
  echo "The script's target is hard coded to '/dev/mmcblk0'."
  echo "This is a safety measure against overwriting the wrong drive."
  echo "Run 'dmesg' to verify that mmcblk0 is the inserted SD card."
  exit 1
fi


# Check dependencies.
type -t wpa_passphrase > /dev/null || { echo "Missing wpa_supplicant."; exit 1; }
type -t mkfs.vfat      > /dev/null || { echo "Missing mkfs.vfat."     ; exit 1; }


# Check if we have root priviliges
if [ "$(whoami)" != "root" ]; then
  echo "Error while checking security priviliges."
  echo "Make sure to run the script with 'sudo'."
  exit 1
fi


# Check if the Multi-Media Card BLOCK device exists.
if [ ! -e "/dev/mmcblk0" ]; then
  echo "Error while looking for '/dev/mmcblk0'."
  echo "Make sure an SD card is inserted."
  exit 1
fi


# Get network information from the user.
while true; do
  echo "Enter network name:"
  read -e essid
  echo "Enter network password:"
  stty -echo
  while IFS= read -p "$prompt" -rn 1 char; do
    if [[ $char == $'\0' ]]; then break; fi
    if [[ $char == $'\b' ]]; then
      if [ -n "$key" ]; then
        prompt=$'\b \b'
        key="${key%?}"
      else prompt=''; fi
    else
      prompt='*'
      key+="$char"
    fi
  done
  stty echo
  echo
  printf "All set? [y/N] "
  read -rn 1 answer
  echo
  if [ "$answer" = "y" ]; then break; fi
done


# Generate the hash.
hash=$(wpa_passphrase "$essid" "$key") || { echo "Password hashing failed."; exit 1; }
for line in $hash; do
  if [[ "$line" =~ ^psk ]]; then hash="${line:4}"; break; fi
done
echo "Password hashed."


# Create temporary directory.
directory=$(find /tmp/rpisetup.* -maxdepth 0 2> /dev/null)
if [ -z "$directory" ] || [ "$(stat -c %U $directory)" != "root" ]; then
    directory="/tmp/rpisetup.$(head /dev/urandom | tr -dc [:alnum:] | head -c 16)"
    mkdir "$directory"
fi
cd "$directory"
echo "Working in temporary directory: $directory"


# Unmount the device's partitions.
while read -r line; do
  words=($line)
  if [[ "${words[0]}" =~ ^/dev/mmcblk0 ]]; then
    umount "${words[1]}" || { echo "Error while unmounting"; exit 1; }
  fi
done < /etc/mtab


# Remove filesytem signatures.
wipefs --quiet --force --all /dev/mmcblk0 > /dev/null


# Partition the device.
{
  echo "o"
  echo "n"
  echo "p"
  echo "1"
  echo
  echo "+100M"
  echo "t"
  echo "c"
  echo "n"
  echo "p"
  echo "2"
  echo
  echo
  echo "w"
} | fdisk /dev/mmcblk0 > /dev/null || { echo "Partitioning failed."; exit 1; }
echo "SD card partitioned."


# Create and mount the FAT filesystem.
mkfs.vfat /dev/mmcblk0p1 &> /dev/null
if [ ! -d boot ]; then mkdir boot; fi
mount /dev/mmcblk0p1 boot


# Create and mount the ext4 filesystem.
mkfs.ext4 /dev/mmcblk0p2 &> /dev/null
if [ ! -d root ]; then mkdir root; fi
mount /dev/mmcblk0p2 root
echo "Created and mounted filesystems."


# Download the archive if it is not already available.
url="http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-latest.tar.gz"
if [ ! -e $(basename $url) ]; then
  echo "Downloading Arch Linux ARM..."
  curl -sLO $url || { echo "Error while downloading Arch Linux ARM."; exit 1; }
fi


# Unpack the archive.
echo "Unpacking the root filesystem..."
bsdtar -xpf $(basename $url) -C root > /dev/null || { echo "Unpacking failed."; exit 1; }
sync


# Move the boot files to the first partition.
mv root/boot/* boot


# Allocate only 16MB to the GPU.
echo "gpu_mem=16" > boot/config.txt


# Turn off the HDMI port to save power during headless operation.
{
  echo "# Disable HDMI"
  echo "/opt/vc/bin/vcgencmd display_power 0"
  echo
  echo "exit 0"
} > root/etc/rc.local
echo "HDMI port configured to be disabled on boot."


# Overwrite the file system table.
{
  echo "#"
  echo "# /etc/fstab: static file system information"
  echo "#"
  echo "# <file system> <dir> <type> <options> <dump> <pass>"
  echo
  echo "# System partitions"
  echo "/dev/mmcblk0p1 /boot vfat defaults           0 0"
  echo "/dev/mmcblk0p2 /     ext4 noatime,nodiratime 0 1"
  echo
  echo "# Temporary partitions"
  echo "tmpfs /tmp     tmpfs rw,nosuid,nodev,noatime,nodiratime,size=64M 0 0"
  echo "tmpfs /var/tmp tmpfs rw,nosuid,nodev,noatime,nodiratime,size=1M  0 0"
  echo "tmpfs /var/log tmpfs rw,nosuid,nodev,noatime,nodiratime,size=1M  0 0"
} > root/etc/fstab
echo "File system table written."


# Create the netctl profile.
while read -r line; do
  if   [[ "$line" =~ ESSID ]]; then line="ESSID='$essid'"
  elif [[ "$line" =~ Key   ]]; then line="Key=\\\"$hash" ; fi
  echo "$line"
done < root/etc/netctl/examples/wireless-wpa \
     > root/etc/netctl/wlan
echo "Wi-Fi profile created: 'wlan'."


# Enable the netctl profile.
{
  echo ".include /usr/lib/systemd/system/netctl@.service"
  echo
  echo "[Unit]"
  echo "Description=A simple WPA encrypted wireless connection"
  echo "BindsTo=sys-subsystem-net-devices-wlan0.device"
  echo "After=sys-subsystem-net-devices-wlan0.device"
} > 'root/etc/systemd/system/netctl@wlan.service'
ln -s 'root/etc/systemd/system/netctl@wlan.service' \
      'root/etc/systemd/system/multi-user.target.wants/netctl@wlan.service'
echo "Wi-Fi profile enabled."


# Disable journalctl logging.
while read -r line; do
  if [[ "$line" =~ Storage ]]; then line="Storage=none"; fi
  echo "$line"
done < root/etc/systemd/journald.conf \
     > tmp && mv tmp root/etc/systemd/journald.conf
echo "Disabled journalctl logging."


# Unmount the two partitions.
umount boot
umount root


# Disable journaling for the root partition.
tune2fs -O ^has_journal /dev/mmcblk0p2 > /dev/null
echo "Disabled journaling for the root parition."


# Notify and exit.
echo "The installation was completed successfully."
